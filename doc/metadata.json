{
  "_": [
    "src/AWT.js",
    "src/Activity.js",
    "src/Deps.js",
    "src/JClic.js",
    "src/JClicPlayer.js",
    "src/PlayerHistory.js",
    "src/Utils.js",
    "src/activities/associations/ComplexAssociation.js",
    "src/activities/associations/SimpleAssociation.js",
    "src/activities/memory/MemoryGame.js",
    "src/activities/panels/Explore.js",
    "src/activities/panels/Identify.js",
    "src/activities/panels/InformationScreen.js",
    "src/activities/puzzles/DoublePuzzle.js",
    "src/activities/puzzles/ExchangePuzzle.js",
    "src/activities/puzzles/HolePuzzle.js",
    "src/activities/text/Complete.js",
    "src/activities/text/Evaluator.js",
    "src/activities/text/FillInBlanks.js",
    "src/activities/text/IdentifyText.js",
    "src/activities/text/OrderText.js",
    "src/activities/text/TextActivityBase.js",
    "src/activities/text/TextActivityDocument.js",
    "src/activities/text/WrittenAnswer.js",
    "src/activities/textGrid/CrossWord.js",
    "src/activities/textGrid/WordSearch.js",
    "src/automation/AutoContentProvider.js",
    "src/automation/arith/Arith.js",
    "src/bags/ActivitySequence.js",
    "src/bags/ActivitySequenceElement.js",
    "src/bags/ActivitySequenceJump.js",
    "src/bags/ConditionalJumpInfo.js",
    "src/bags/JumpInfo.js",
    "src/bags/MediaBag.js",
    "src/bags/MediaBagElement.js",
    "src/boxes/AbstractBox.js",
    "src/boxes/ActiveBagContent.js",
    "src/boxes/ActiveBox.js",
    "src/boxes/ActiveBoxBag.js",
    "src/boxes/ActiveBoxContent.js",
    "src/boxes/ActiveBoxGrid.js",
    "src/boxes/BoxBag.js",
    "src/boxes/BoxBase.js",
    "src/boxes/BoxConnector.js",
    "src/boxes/TextGrid.js",
    "src/boxes/TextGridContent.js",
    "src/media/ActiveMediaBag.js",
    "src/media/ActiveMediaPlayer.js",
    "src/media/AudioBuffer.js",
    "src/media/EventSounds.js",
    "src/media/EventSoundsElement.js",
    "src/media/MediaContent.js",
    "src/project/JClicProject.js",
    "src/project/ProjectSettings.js",
    "src/shapers/ClassicJigSaw.js",
    "src/shapers/Holes.js",
    "src/shapers/JigSaw.js",
    "src/shapers/Rectangular.js",
    "src/shapers/Shaper.js",
    "src/shapers/TriangularJigSaw.js",
    "src/skins/Counter.js",
    "src/skins/DefaultSkin.js",
    "src/skins/Skin.js"
  ],
  "conf": {
    "monospaceLinks": true,
    "cleverLinks": true,
    "logo": "ico.png",
    "dateFormat": "ddd MMM Do YYYY",
    "outputSourceFiles": true,
    "outputSourcePath": true,
    "default": {
      "outputSourceFiles": true
    },
    "systemName": "JClic.js",
    "applicationName": "JClic.js",
    "disqus": "",
    "footer": "",
    "copyright": "",
    "navType": "inline",
    "theme": "yeti",
    "linenums": true,
    "collapseSymbols": false,
    "//analytics": {
      "ua": "UA-XXXXX-XXX",
      "domain": "XXXX"
    },
    "googleAnalytics": "",
    "inverseNav": true,
    "highlightTutorialCode": true,
    "syntaxTheme": "default",
    "protocol": "html://",
    "openGraph": {
      "title": "",
      "type": "website",
      "image": "",
      "site_name": "",
      "url": ""
    },
    "meta": {
      "title": "",
      "description": "",
      "keyword": ""
    }
  },
  "code": {
    "classes": {
      "AbstractBox": "<p>This abstract class is the base for most graphic components of JClic. It describes an area<br>(by default an {@link AWT.Rectangle}) with some special properties that determine how it must<br>be drawn on screen.<br><br>Some types of boxes can act as containers for other boxes, establishing a hierarchy of dependences.</p>",
      "ActiveBagContent": "<p>This class packs a collection of {@link ActiveBoxContent} objects and provides methods to access<br>and manage it. The two main members of <code>ActiveBagContent</code> are the {@link Shaper}, responsible for<br>determining the position and shape of each {@link ActiveBox}, and the {@link BoxBase} (field <code>bb</code>),<br>provider of a common visual style.</p>",
      "ActiveBox": "<p>Objects of this class are widely used in JClic activities: cells in puzzles and associations,<br>messages and other objects are active boxes.<br><br>The specific content, size and location of <code>ActiveBox</code> objects is determined by its<br>{@link ActiveBoxContent} member. Most ActiveBoxes have only one content, but some of them can<br>have a secondary or &quot;alternative&quot; content stored in the <code>altContent</code> field. This content is<br>used only when the <code>alternative</code> flag of the ActiveBox is on.<br><br>Active boxes can host video and interactive media content (specified in the <code>mediaContent</code><br>member of the {@link ActiveBoxContent} through its <code>hostedMediaPlayer</code> member.</p>",
      "ActiveBoxBag": "<p>This class is a special case of {@link BoxBag} containing only objects of type {@link ActiveBox}.<br><br>In addition to the members and methods of <code>BoxBag</code>, it implements specific methods to deal with<br>{@link ActiveBagContent} objects and with the other specific members of <code>ActiveBox</code> like its &quot;ids&quot;<br>(<code>idOrder</code>, <code>idLoc</code> and <code>idAss</code>).</p>",
      "ActiveBoxContent": "<p>This class defines a content that can be displayed by {@link ActiveBox} objects. This content<br>can be a text, an image, a fragment of an image or a combination of text and images. The style<br>(colours, font and size, borders, shadows, margins, etc.) are specified in the <code>bb</code> attribute,<br>always pointing to a {@link BoxBase} object.</p>",
      "ActiveBoxGrid": "<p>This class extends {@link ActiveBoxBag} with constructors that take an argument of type<br>{@link Shaper} used to build all its {@link ActiveBox}components. It also mantains information<br>about the number of &quot;rows&quot; and &quot;columns&quot;, useful to compute appropiate (integer) values when<br>resizing or moving its components.</p>",
      "ActiveMediaBag": "<p>This class stores a collection of realized {@link ActiveMediaPlayer} objects, related to a<br>{@link JClicProject} or {@link Activity}.</p>",
      "ActiveMediaPlayer": "<p>This kind of object encapsulates a realized {@link MediaContent} and provides methods to start,<br>stop, pause and record different types of media (audio, video, MIDI, voice recording...)</p>",
      "Activity": "<p>Activity is the abstract base class of JClic activities. It defines also the inner class<br>{@link Activity.ActivityPanel}, wich is responsible for user interaction with the activity<br>content.<br>Activities should extend both <code>Activity</code> and <code>ActivityPanel</code> classes in order to become fully<br>operative.</p>",
      "Panel": "<p>The {@link Activity.Panel} where writen answer activities are played.</p>",
      "ActivitySequence": "<p>This class stores the definition of the sequence to follow to show the activities of a<br>{@link JClicProject}. The sequence are formed by an ordered list of objects of type<br>{@link ActivitySequenceElement}.<br><br>It stores also a transient pointer to the current sequence element.</p>",
      "ActivitySequenceElement": "<p>This class is the basic component of {@link ActivitySequence} objects. It represents a specific<br>point in the project's sequence of JClic activities.<br><br>For each point of the sequence, some options can be set:</p>\n<ul>\n<li>What activity must run at this point</li>\n<li>What to do or where to jump when the activity finishes</li>\n<li>The behavior of the &quot;next&quot; button</li>\n<li>The behavior of the  &quot;prev&quot; button</li>\n</ul>\n<p>Sequence points can also have a &quot;tag&quot;, used to refer to them with a unique name.</p>",
      "ActivitySequenceJump": "<p>This is a special case of {@link JumpInfo}, used only in {@link ActivitySequenceElement} objects.<br><br>Sequence elements can contain up to two ActivitySequenceJump objects: one to be processed<br>when the user clicks on the &quot;next&quot; button (or when the activity finishes, if in automatic mode),<br>and the other used with the &quot;prev&quot; button. ActivitySequenceJump objects define a default jump<br>or action to be performed, but can also have up to two {@link ConditionalJumpInfo} objects. These<br>define alternative jumps that are performed only when score or time are below or over a specific<br>threshold.</p>",
      "Arith": "<p>Arith provides randomly generated menthal arithmetics operations, ready to be used in JClic activities.<br><br>The operations can be additions, substractions, multiplications or divides. The unknown of these<br>operations can be the result of the operation (<code>A op B = ?</code>), any of the two operators<br>(<code>A op ? = C</code> or <code>? op B = C</code>) or also the operator itself (<code>A ? B = C</code>).</p>",
      "Operator": "<p>Operator is an Utility class used by Arith to encapsulate the properties and methods related<br>to the members of the operations.</p>",
      "AudioBuffer": "<p>The AudioBuffer object provides sound recording and replaying to activities.</p>",
      "AutoContentProvider": "<p>This abstract class is the base for classes that create on-time automatic content for JClic<br>activities, usually using random parameters to assure different content in each session.<br><br>Activities with <code>AutoContentProvider</code> objects rely on them to build new content on every start.</p>",
      "ActiveBagContentKit": "<p>Utility object used to encapsulate multiple sets of box contents</p>",
      "AWT": "<p>This object contains utility clases for painting graphics and images,<br>as found in the Java <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/package-summary.html\">Abstract Window Toolkit</a>  </p>\n<p>The objects defined here are: {@link AWT.Font}, {@link AWT.Gradient}, {@link AWT.Stroke},<br>{@link AWT.Point}, {@link AWT.Dimension}, {@link AWT.Shape}, {@link AWT.Rectangle},<br>{@link AWT.Ellipse}, {@link AWT.Path}, {@link AWT.PathStroke}, {@link AWT.Action},<br>{@link AWT.Timer} and {@link AWT.Container}.</p>",
      "Action": "<p>This class encapsulates actions that can be linked to buttons, menus and other active objects</p>",
      "Container": "<p>Logic object that takes care of an &quot;invalidated&quot; rectangle that will be repainted<br>at the next update of a 2D object, usually an HTML Canvas.<br>AWT.Container has the same constructor options as {@link AWT.Rectangle}</p>",
      "Dimension": "<p>This class encapsulates <code>width</code> and <code>height</code> properties.</p>",
      "Ellipse": "<p>The Ellipse shape has the same constructor options as {@link AWT.Rectangle}</p>",
      "Font": "<p>AWT.Font contains properties and provides methods to manage fonts</p>",
      "Gradient": "<p>Contains parametres and methods to draw complex color gradients</p>",
      "Path": "<p>A <code>Path</code> is a {@link AWT.Shape} formed by a serie of strokes, represented by<br>{@link AWT.PathStroke} objects</p>",
      "PathStroke": "<p>PathStroke is the basic component of AWT.Path objects</p>",
      "Point": "<p>Contains the <code>x</code> andy <code>y</code> coordinates of a point, and provides some useful methods.</p>",
      "Rectangle": "<p>The rectangular {@link AWT.Shape} accepts five different sets of parameters:</p>",
      "Shape": "<p>Shape is a generic abstract class for rectangles, ellipses and stroke-free shapes.</p>",
      "Stroke": "<p>Contains properties used to draw lines in HTML <code>canvas</code> elements.<br>See: [http://bucephalus.org/text/CanvasHandbook/CanvasHandbook.html#line-caps-and-joins]</p>",
      "Timer": "<p>This class provides a timer that will launch a function at specific intervals</p>",
      "BoxBag": "<p>BoxBag is a class derivated from {@link AbstractBox} that contains a collection of &quot;boxes&quot;<br>(objects also derived from {@link AbstractBox}). This class implements methods to add, remove<br>and retrieve boxes, and to manage some of its properties like visibility, status, location and size.</p>",
      "BoxBase": "<p>This class contains all the main visual attributes needed to draw {@link AbstractBox} objects:<br>background and foreground colors, gradients, colors for special states (inactive, alternative,<br>disabled...), margins, fonts, border strokes, etc.<br><br>Objects derived from {@link AbstractBox} can have inheritance: boxes that act as &quot;containers&quot;<br>of other boxes (like {@link BoxBag}). Most of the attributes of <code>BoxBase</code> can be <code>null</code>,<br>meaning that the value of the ancestor -or the default value if the box has no ancestors- must<br>be used.</p>",
      "BoxConnector": "<p>BoxConnector allows users to visually connect two {@link ActiveBox} objects of an<br>{@link Activity.Panel}. There are two modes of operation:</p>\n<ul>\n<li>Drawing a line between an origin point (usually the point where the user clicks on) and a<br>destination point.</li>\n<li>Dragging the ActiveBox from one location to another.<br>The connecting lines can have arrowheads at its endings.</li>\n</ul>",
      "ClassicJigSaw": "<p>This is the classic {@link JigSaw} {@link Shaper} used in puzzle toys, where teeth and slots<br>are shaped by bezier curves.</p>",
      "Complete": "<p>This type of text activity suggests users to complete a given text, without any help on where to<br>write the missing words or phrases.</p>",
      "ComplexAssociation": "<p>This is a special case of {@link SimpleAssociation} where the elements of the 'secondary' panel<br>can have zero, one or more associated elements in the 'primary' panel.</p>",
      "ConditionalJumpInfo": "<p>This special case of {@link JumpInfo} is used in {@link ActivitySequenceJump} objects to decide<br>the type of jump or action to be performed, based on the results obtained by the user when<br>playing previous JClic activities.<br><br>In addition to the standard {@link JumpInfo} fields and methods, this class has two public<br>members where score and time thresholds are stored.<br><br>The exact meaning of this members will depend on the type of <code>ConditionalJumpInfo</code> in the<br>{@link ActivitySequenceJump} (it can be <code>upperJump</code> or <code>lowerJump</code>).</p>",
      "CrossWord": "<p>This class of {@link Activity} shows a {@link TextGrid} initially empty, with some cells<br>marked in negative color that act as word stoppers. A blinking &quot;cursor&quot; indicates the cell that<br>will receive the next character entered by the user on the keyboard.<br><br>The letter in each cell of the grid is always shared by two words: one in horizontal direction<br>and the other one in vertical. Two {@link ActiveBox} objects are placed next to the<br>{@link TextGrid}, hosting the definitions of the horizontal and vertyical words crossing at the<br>cell currently marked by the cursor.<br><br>Two special buttons placed near this boxes allow to write on the grid horizontally or vertically.<br>The aim of the activity is to fill all the text grid with the correct words.<br></p>",
      "DefaultSkin": "<p>This is the default {@link Skin} used by JClic.js</p>",
      "DoublePuzzle": "<p>The aim of this class of {@link Activity} is to put in order the scrambled elements of an<br>{@link ActiveBagContent} that contains an image, sounds, text... or any other media content.<br><br>The activity uses two panels: one with the scrambled cells, and other initially empty where<br>this cells must be placed in order.</p>",
      "Evaluator": "<p>This class and its derivatives {@link Evaluator.BasicEvaluator} and<br>{@link Evaluator.ComplexEvaluator} are used to evaluate the answers written by the final users<br>in text activities.</p>",
      "BasicEvaluator": "<p>A basic evaluator that just compares texts, without looking for possible coincidences of text<br>fragments once erroneous characters removed.</p>",
      "ComplexEvaluator": "<p>ComplexEvaluator acts like {@link Evaluator.BasicEvaluator}, but providing feedback about<br>the location of mistakes on the user's answer.</p>",
      "EventSounds": "<p>The EventSounds objects contains specific sounds to be played when JClic events are fired:</p>\n<ul>\n<li>start</li>\n<li>click</li>\n<li>actionError</li>\n<li>actionOk</li>\n<li>finishedError</li>\n<li>finishedOk</li>\n</ul>\n<p>The sounds are stored in an array of {@link EventSoundsElement} objects.</p>",
      "EventSoundsElement": "<p>The EventSoundsElement object contains the description of a specific sound to be played when<br>one of the JClic events are fired.<br><br>For a full list of the JClic events see: {@link EventSounds}</p>",
      "ExchangePuzzle": "<p>This class of {@link Activity} shows only one panel with scrambled {@link ActiveBox} objects.<br>To solve the activity, each cell must exchange its location with another one. When all cells are<br>on place, the activity is done.</p>",
      "Explore": "<p>This class of {@link Activity} shows a panel with {@link ActiveBox} objects. Users can click<br>on this objects to obtain associated information. This associated information, displayed in<br>a second panel, can be text graphics, sound, video... or a combination of them.</p>",
      "FillInBlanks": "<p>In this type of activity the text document has some blanks that must be filled-in. The blanks<br>can be drop-down boxes or text fields (empty or pre-filled with an initial text). Blanks can<br>also have associated clues, shown as &quot;pop-ups&quot;.</p>",
      "HolePuzzle": "<p>This class of {@link Activity} shows only one panel with scrambled {@link ActiveBox} cells.<br><br>One of the cells is out of the main panel, thus allowing its neighbors occupy their space.<br>Only immediate neighbors of the &quot;hole&quot; can move into it.<br><br>When all cells are on place, the initially &quot;expulsed&quot; cell comes back home and the activity is done.</p>",
      "Holes": "<p>This {@link Shaper} consists of a set of arbitrary shapes placed over a main rectangle that<br>acts as a enclosure.<br><br>The components can be of type {@link AWT.Rectangle}, {@link AWT.Ellipse} or {@link AWT.Path}.<br><br>This components have internal dimension values relative to the horizontal and vertical<br>sizes of the enclosure. Its values (always between 0 and 1) must be scaled to real sizes<br>of graphic objects.</p>",
      "Identify": "<p>The aim of this type of {@link Activity} is to identify {@link ActiveBox} elements in a panel<br>that satisfy a specific condition, usually exposed in the main message.</p>",
      "IdentifyText": "<p>This type of text activity suggests users to click on specific words or single letters of a<br>given text, without any help on where these elements are placed.</p>",
      "InformationScreen": "<p>This class of {@link Activity} just shows a panel with {@link ActiveBox} objects.<br><br>Because active boxes can act as a links to specific points in the project's sequence of<br>activities, this kind of activity is often used as a menu where users can choose from different<br>options.</p>",
      "JClicPlayer": "<p>JClicPlayer is one of the the main classes of the JClic system. It implements the<br><a href=\"http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html\">PlayStation</a><br>interface, needed to read and play JClic projects.<br><br>JClicPlayer offers to {@link Activity#Panel} objects all the necessary resources and functions:<br>media bags (to load and realize images and other media contents), sequence control, management<br>of the reporting system, user interface, display of system messages, etc.</p>",
      "JClicProject": "<p>JClicProject contains all the components of a JClic project: activities, sequences, media<br> files, descriptors and metadata.<br><br> This encapsulation is achieved by three auxiliary objects:</p>\n<ul>\n<li>{@link ProjectSettings}: stores metadata like full tiltle, description, authors, languages,<br>educational topics...</li>\n<li>{@link ActivitySequence}: defines the order in which the activities must be shown.</li>\n<li>{@link MediaBag}: contains the list of all media files used by the activities</li>\n</ul>",
      "JigSaw": "<p>This {@link Shaper} returns a set of rectangular shapes with teeth and slots that fit between them.</p>",
      "JumpInfo": "<p>This class contains information about what things JClic sequence manager has to do in certain<br>circumstances, such as:</p>\n<ul>\n<li>an activity finishes</li>\n<li>the user clicks on the &quot;next&quot; or &quot;prev&quot; buttons</li>\n<li>the user clicks or a cell with special &quot;active content&quot;</li>\n</ul>\n<p>Different kinds of actions are possible for each of these events:</p>\n<ul>\n<li>RETURN: to go back to a previous point in the sequence.</li>\n<li>EXIT: to exit the program (thus navigating to another URL)</li>\n<li>STOP: to do nothing.</li>\n<li>JUMP: to jump to a specific point in the sequence of activities, or to another JClic project.</li>\n</ul>",
      "MediaBag": "<p>This class stores and manages all the media components (images, sounds, animations, video,<br>MIDI files, etc.) needed to run the activities of a {@link JClicProject}. The main member of<br>the class is <code>elements</code>. This is where {@link MediaBagElement} objects are stored.</p>",
      "MediaBagElement": "<p>This kind of objects are the components of {@link MediaBag}.<br><br>Media elements have a name, a reference to a file (the <code>fileName</code> field) and, when initialized,<br>a <code>data</code> field pointing to a object containing the real media. They have also a flag indicating<br>if the data must be saved on the {@link JClicProject} zip file or just mantained as a reference<br>to an external file.</p>",
      "MediaContent": "<p>This object contains a description of any multimedia content (sound, video, MIDI, voice<br>recording..) or special actions (jump to another point in the sequence, link to an URL, etc.)<br>associated to an {@link ActiveBox} object.</p>",
      "MemoryGame": "<p>This class of {@link Activity} shows a panel with duplicate {@link ActiveBox} objects initially<br>hidden and scrambled. To complete the activity, all object pairs must be found. Only two objects<br>are revealed in every move, so the user must remember the content of each cell.<br><br>The cell pairs can have identical content, defined in the <code>primary</code> {@link ActiveBagContent} of<br>the activity, or two different contents. In this case, the <code>secondary</code> bag elements will have<br>content related to each <code>primary</code> element.</p>",
      "OrderText": "<p>In this type of text activity users must put in order some words or paragrafs that have been<br>initially scrambled.</p>",
      "PlayerHistory": "<p>PlayerHistory uses an array to store the list of projects and activities done by the user.<br>This class allows {@link JClicPlayer} objects to rewind a sequence or to go back to a caller menu.</p>",
      "HistoryElement": "<p>Inner class used to store history elements.</p>",
      "ProjectSettings": "<p>This class contains miscellaneous settings of JClic projects.<br><br>In addition to the members of this class, there can be other properties in JClic project files<br>that are not currently loaded:</p>\n<ul>\n<li>iconFileName</li>\n<li>descriptors</li>\n<li>area</li>\n<li>level</li>\n<li>locale</li>\n<li>authors</li>\n<li>organizations</li>\n<li>revisions</li>\n</ul>",
      "Rectangular": "<p>This is the simplest {@link Shaper}. It divides the graphic object in a set of rectangular<br>shapes distributed in the specified number of rows and columns.</p>",
      "Shaper": "<p>The function of this class and its subclasses is to draw a set of &quot;shapes&quot; that will be used to<br>place {@link ActiveBox} objects at a specific position, and to determine its dimension and<br>appareance.</p>",
      "SimpleAssociation": "<p>This class of {@link Activity} uses two panels (<code>primary</code> and <code>secondary</code>) formed by<br>{@link ActiveBox} objects filled with data stored in {@link ActiveBagContent} repositories.<br><br>Both panels have the same number of elements, associated one-to-one. A third {@link ActiveBagContent}<br>can be used as alternative content, that will be revealed in the <code>primary</code> panel as the pairings<br>of its cells are solved.</p>",
      "Skin": "<p>This abstract class manages the layout, position ans size of the visual components of JClic:<br>player window, message box, counters, buttons, status... and also the appareance of the main<br>container.<br><br>The basic implementation of Skin is {@link DefaultSkin}.</p>",
      "TextActivityBase": "<p>This class and its visual component {@link TextActivityBase.Panel} are the base for text<br>activities like {@link FillInBlanks}, {@link IdentifyText}, {@link OrderText} and {@link Complete}.</p>",
      "TextActivityDocument": "<p>This is the HTML DOM element used in text activities like {@link FillInBlanks},<br>{@link IdentifyText}, {@link OrderText} and {@link Complete}. It contains the main document of<br>the activity, usually with some elements marked as &quot;targets&quot;. In {@link FillInBlanks}, this<br>targets are encapsulated in {@link TextActivityDocument.TextTarget} objects.</p>",
      "TextTarget": "<p>This class contains the properties and methods of the document elements that are the real<br>targets of user actions in text activities.</p>",
      "TextGrid": "<p>This class is a special type of {@link AbstractBox} that displays a grid of single<br>characters.<br><br>It's used {@link CrossWord} and {@link WordSearch} activities.</p>",
      "TextGridContent": "<p>This class encapsulates the content of {@link TextGrid} objects.<br><br>It implements methods to set and retrieve individual characters on the grid, and parsing of<br>XML objects. It also contains information about the optimal size and other graphic properties<br>(fonts, colors, etc.) of the grid.</p>",
      "TriangularJigSaw": "<p>This {@link Shaper} returns a set of rectangular shapes with triangular teeth and slots that<br>fit between them.</p>",
      "Utils": "<p>Miscellaneous utility functions and constants</p>",
      "WordSearch": "<p>This class of {@link Activity} shows a {@link TextGrid} with some words placed in horizontal,<br>vertical or diagonal direction, written right or upside down. The remaining grid cells will be<br>filled with randomly selected characters.<br><br>The aim of the activity is to find all the words hidden on the text grid.<br><br>The content of an optional {@link ActiveBagContent} can be revealed on an auxiliary panel as<br>words are found.</p>",
      "WrittenAnswer": "<p>This class of {@link Activity} shows a panel with {@link ActiveBox} objects acting as cells<br>with questions. The answers to these questions must be written in a separate text field.<br><br>The ActiveBox objects are filled with data stored in {@link ActiveBagContent} repositories.<br><br>A second {@link ActiveBagContent} can be used as alternative content, revealed as the questions<br>are solved.</p>"
    },
    "modules": {
      "JClic": "<p>This is the main JClic method</p>\n<p>Executes on <code>document.ready()</code>.</p>\n<p>The method iterates over all <code>div</code> objects with <code>JClic</code> class and creates a {@link JClicPlayer}<br>within them. Each player loads the JClic project file specified in the <code>data-project</code> attribute of<br>the <code>div</code> tag.</p>\n<p>The <code>div</code> elements must preferabily be empty. Inner content may become overlapped by objects<br>created by the JClic player.</p>\n<p>This method exports the global variable <code>window.JClicObject</code>, useful when other scripts<br>need to make direct calls to the main components of JClic.</p>\n<p>The global variable <code>JClicObject</code> has four members:</p>\n<ul>\n<li><code>JClicObject.JClicPlayer</code> (the {@link JClicPlayer} object)</li>\n<li><code>JClicObject.JClicProject</code> (the {@link JClicProject} object)</li>\n<li><code>JClicObject.AWT</code> (the {@link AWT} object)</li>\n<li><code>JClicObject.Utils</code> (the {@link Utils} object)</li>\n<li><code>JClicObject.options</code> (the main options loaded at startup, usually the content of the global variable <code>JClicDataOptions</code>)</li>\n<li><code>JClicObject.$</code> (the JQuery object)</li>\n</ul>"
    },
    "namespaces": {},
    "mixins": {},
    "externals": {
      "CanvasRenderingContext2D": "<p>The CanvasRenderingContext2D interface provides the 2D rendering context for the drawing surface<br>of a &lt;canvas&gt; element.</p>",
      "Collator": "<p>The Intl.Collator object is a constructor for collators, objects that enable language sensitive<br>string comparison.</p>",
      "HTMLAudioElement": "<p>The HTMLAudioElement interface provides access to the properties of &lt;audio&gt; elements, as<br>well as methods to manipulate them. It derives from the<br>{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement HTMLMediaElement} interface.</p>",
      "HTMLImageElement": "<p>The HTMLImageElement interface provides special properties and methods (beyond the regular<br>{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement} interface it<br>also has available to it by inheritance) for manipulating the layout and presentation of<br>&lt;img&gt; elements.</p>",
      "jQuery": "<p>A jQuery object</p>",
      "JSZip": "<p>A JSZip object</p>",
      "MediaRecorder": "<p>The MediaRecorder interface of the {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API MediaRecorder API}<br>provides functionality to easily capture media.</p>"
    }
  }
}