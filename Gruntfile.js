/* global module */
module.exports = function (grunt) {

  "use-strict";

  // Fill `pkg` with the full content of package.json
  var pkg = grunt.file.readJSON('package.json');
  
  // List of curently available languages and map of language '.po' files
  var LANGUAGES = ['en', 'ar', 'ast', 'bs', 'ca', 'ca_ES@valencia', 'cs', 'da', 'de', 'el', 'es', 'eu', 'fr', 'gl', 'he',
                   'it', 'nl', 'pt', 'pt_BR', 'ru', 'tr', 'vec', 'zh_TW'];
  var LNG_MAP = {};
  for(var p=1; p<LANGUAGES.length; p++)
    LNG_MAP[LANGUAGES[p]] = 'locales/' + LANGUAGES[p] + '.po';

  // Configure Grunt tasks
  grunt.initConfig({
    //
    // Set also a `pkg` member in Grunt config
    pkg: pkg,
    //
    // Define metadata elements used in other tasks
    meta: {
      banner: '\
// JClic.js version <%= pkg.version %> (<%= grunt.template.today("yyyy-mm-dd") %>)\n\
// HTML5 player of JClic activities\n\
// (c) 2000-<%= grunt.template.today("yyyy") %> Educational Telematic Network of Catalonia (XTEC)\n\
// This program can be freely redistributed under the terms of the GNU General Public License\n\
// WARNING: You are reading a minimized, uglifyed version of jclic.js. Full, readable source\n\
// code is freely available at: <%= pkg.homepage %>\n'
    },
    //
    // Check source code for possible inconsistencies or syntax errors
    jshint: {
      files: ['src/**/*.js', '!src/GlobalData.js'],
      options: {
        browserify: true,
        sub: true,
        multistr: true,
        eqeqeq: true,
        esversion: 5,
        forin: true,
        freeze: true,
        futurehostile: true,
        latedef: true,
        noarg: true,
        nonew: true,
        singleGroups: true,
        undef: true,
        globals: {
          define: true,
          console: true,
          alert: true,
          Promise: true,
          parseInt: true
        }
      }
    },
    //
    // Delete temporal and target directories before build tasks
    clean: {
      dist: {
        src: ['dist']
      },
      doc: {
        src: ['doc']
      },
      build: {
        src: ['build']
      }
    },
    //
    // Convert all `locales/language.po` files from `gettext` to JSON format, and concatenate them
    // into `build/messages.js`
    po_json: {
      locales: {
        files: {
          'build/messages.js': LNG_MAP
        }
      }
    },
    //
    // Concatenate all `src` files and Node components into a single file `dist/jclic.js`
    browserify: {
      dist: {
        files: {
          'dist/jclic.js': ['src/JClic.js']
        },
        options: {
          browserifyOptions: {
            debug: true
          },
          baseUrl: './src/',
          debug: true,
          transform: ['deamdify'],
          banner: '<%= meta.banner %>'
        }
      }
    },
    //
    // Extracts sourcemap from `dist/jclic.js`, splitting it in two files: `jclic.js` and `jclic.js.map`
    extract_sourcemap: {
      dist: {
        files: {
          'dist': ['dist/jclic.js']
        }
      }
    },
    //
    // Minimize `dist.jclic.js`, thus generating the final file for production: `jclic.min.js`
    uglify: {
      dist: {
        options: {
          banner: '<%= meta.banner %>',
          preserveComments: false
        },
        files: {
          'dist/jclic.min.js': ['dist/jclic.js']
        }
      }
    },
    //
    // Creates full documentation of the project in `/doc`
    jsdoc: {
      doc: {
        src: ['misc/jsdoc/index.md', 'src/**/*.js', '!src/GlobalData.js'],
        options: {
          destination: 'doc',
          configure: 'jsdoc.conf.json',
          template: 'node_modules/gc-jaguarjs-jsdoc'
        }
      }
    },
    //
    // Copy and process some files needed for other tasks to complete
    copy: {
      doc: {
        files: [{src: 'misc/jsdoc/ico.png', dest: 'doc/ico.png'}]
      },
      locales: {
        options: {
          process: function (content, srcpath) {
            return '// WARNING: Autogenerated file. Do not edit!\n' +
                    '// Use "grunt locales" to update this file from "/locales/*.po"\n\n' +
                    'define({version: "' + pkg.version + ' (' + grunt.template.today("yyyy-mm-dd") + ')",'+
                    ' languages: ' + JSON.stringify(LANGUAGES) + ', messages: ' + content + '});';
          }
        },
        src: 'build/messages.js',
        dest: 'src/GlobalData.js'
      }
    },
    //
    // Launches a minimalist web server for testing purposes
    express: {
      all: {
        options: {
          bases: ['.'],
          port: 8080,
          hostname: '0.0.0.0',
          livereload: false,
          open: 'http://localhost:8080/test/jclic-demo/index.html'
        }
      }
    },
    //
    // Check for changes and reloads express server when needed
    watch: {
      all: {
        files: ['src/**/*.js', 'dist/*.js'],
        options: {
          livereload: true
        }
      }
    }
  });

  // Define Grunt tasks with "load-grunt-tasks" instead of calls to "grunt.loadNpmTasks" for each module
  require("load-grunt-tasks")(grunt);

  // Define main tasks:
  grunt.registerTask('server',
          'Starts a test server',
          ['express', 'watch']);

  grunt.registerTask(
          'lint',
          'Checks the JS code',
          ['jshint']);

  grunt.registerTask(
          'locales',
          'Process translations',
          ['clean:build', 'po_json:locales', 'copy:locales']);

  grunt.registerTask(
          'build',
          'cleans and compiles all',
          ['jshint', 'locales', 'clean:dist', 'browserify:dist', 'extract_sourcemap:dist', 'uglify:dist']);

  grunt.registerTask(
          'doc',
          'Generates the project documentation in "doc"',
          ['clean:doc', 'jsdoc:doc', 'copy:doc']);

  grunt.registerTask(
          'default',
          'builds all',
          ['build']);
};
